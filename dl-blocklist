#!/usr/bin/python3

import os
import re
import sys
import requests
import ipaddress
import argparse
from urllib.parse import urlparse

# not allowed addresses and networks
bl_addr = ( "127.0.0.1", "::1", "0.0.0.0", "255.255.255.255" )
bl_nets = ( "127.", "10.", "172.16.", "192.168.", "FC00::", "FD00::")
bl_host = ( "localhost", "local", "ip6-localhost", "ip6-loopback" )

strict = True
verbose = 0

def valid_ip(address, blacklist=True):
  # upper() is to normalize IPv6 addresses
  if filter == True and address.upper().startswith(bl_addr):
    return False
  try:
    ipaddress.ip_address(address)
    return True
  except:
    return False

def valid_net(address):
  # upper() is to normalize IPv6 addresses
  if address.upper().startswith(bl_nets):
    return False
  try:
    ipaddress.ip_network(address, strict=strict)
    return True
  except:
    return False

def valid_block_ip(address):
  if address == "0.0.0.0" or address == "127.0.0.1" or address == "::1":
    return True
  else:
    return False

# https://stackoverflow.com/a/2532344
def valid_hostname(hostname):
  if hostname.lower().startswith(bl_host) or valid_ip(hostname, False):
    return False
  if len(hostname) > 255:
      return False
  if hostname[-1] == ".":
      hostname = hostname[:-1] # strip exactly one dot from the right, if present
  allowed = re.compile("(?!-)[A-Z\d-]{1,63}(?<!-)$", re.IGNORECASE)
  return all(allowed.match(x) for x in hostname.split("."))

def validate_line(line):
  parts = line.split(" ")
  if len(parts) == 1 and (valid_ip(parts[0]) or valid_net(parts[0])):
    return True
  if len(parts) >= 2 and valid_block_ip(parts[0]) and valid_hostname(parts[1]):
    return True
  return False

def remove_comment(line):
  if line.find("#"):
    return line.split("#")[0].strip()
  else:
    return line

def get_dst_name(url, filename):
  if os.path.isdir(filename):
    return os.path.join(filename, os.path.basename(urlparse(url).path))
  else:
    return filename

def download(url, filename):
  dst_name = get_dst_name(url, filename)
  resp = requests.get(url)
  total = 0
  added = 0
  if resp.status_code == 200:
    try:
      file = open(dst_name, "w")
      for line in resp.text.strip().split('\n'):
        total += 1
        line = remove_comment(line)
        if line == "":
          continue
        if verbose > 1:
          print(f"Processing line \"{line}\"", end='')
        if not validate_line(line):
          if verbose > 1:
            print("...filtered")
          continue
        added += 1
        if verbose > 1:
          print("...writing to destination file")
        file.write(line + "\n")
      file.close()

      if verbose > 0:
        bname = os.path.basename(dst_name)
        filtered = total - added
        print(f"{bname}: total={total}, added={added}, filtered={filtered}")

    except:
      print(f"ERROR: Couldn't save blocklist \"{filename}\" from \"{url}\"")
  else:
    print(f"ERROR: Couldn't donwload \"{filename}\" from \"{url}\"")

if __name__ == "__main__":
  parser = argparse.ArgumentParser(
    prog=os.path.basename(sys.argv[0]),
    description="Automated blocklist download in a slightly more secure way."
  )
  parser.add_argument('url', help="URL to download blocklist from.")
  parser.add_argument('destination', help="Destination filename or directory. In case of directory, basename from URL is used as filename.")
  parser.add_argument('-l', '--lax', action="store_true", help="set network filter in lax-mode")
  parser.add_argument('-v', '--verbose', action="count", help="increase verbosity, max 2 times")

  args = parser.parse_args()
  strict = not args.lax

  if args.verbose == None:
    verbose = 0
  else:
    if args.verbose > 2:
      args.verbose = 2
    verbose = args.verbose

  download(args.url, args.destination)
